import 'dart:collection';

class TreeNode {
  int value;
  TreeNode? left;
  TreeNode? right;

  TreeNode(this.value);
}

class BinaryTree {
  TreeNode? root;

  void addLevelOrder(int value) {
    TreeNode newNode = TreeNode(value);
    if (root == null) {
      root = newNode;
      return;
    }

    Queue<TreeNode> queue = Queue<TreeNode>();
    queue.add(root!);
    while (queue.isNotEmpty) {
      TreeNode current = queue.removeFirst();
      if (current.left == null) {
        current.left = newNode;
        return;
      } else {
        queue.add(current.left!);
      }
      if (current.right == null) {
        current.right = newNode;
        return;
      } else {
        queue.add(current.right!);
      }
    }
  }

  bool addByTarget(int target, int value) {
    if (root == null) return false;

    Queue<TreeNode> queue = Queue<TreeNode>();
    queue.add(root!);
    while (queue.isNotEmpty) {
      TreeNode current = queue.removeFirst();
      if (current.value == target) {
        if (current.left == null) {
          current.left = TreeNode(value);
          return true;
        } else if (current.right == null) {
          current.right = TreeNode(value);
          return true;
        } else {
          return false;
        }
      }
      if (current.left != null) queue.add(current.left!);
      if (current.right != null) queue.add(current.right!);
    }

    return false;
  }

  List<int> inOrderTraversal() {
    List<int> result = [];
    List<TreeNode> stack = [];
    TreeNode? current = root;

    while (current != null || stack.isNotEmpty) {
      while (current != null) {
        stack.add(current);
        current = current.left;
      }
      current = stack.removeLast();
      result.add(current.value);
      current = current.right;
    }
    return result;
  }

  List<int> preOrderTraversal() {
    List<int> result = [];
    if (root == null) return result;

    List<TreeNode> stack = [root!];
    while (stack.isNotEmpty) {
      TreeNode current = stack.removeLast();
      result.add(current.value);
      if (current.right != null) stack.add(current.right!);
      if (current.left != null) stack.add(current.left!);
    }
    return result;
  }

  List<int> postOrderTraversal() {
    List<int> result = [];
    if (root == null) return result;

    List<TreeNode> stack = [];
    TreeNode? current = root;
    TreeNode? lastVisited;

    while (current != null || stack.isNotEmpty) {
      while (current != null) {
        stack.add(current);
        current = current.left;
      }
      TreeNode peek = stack.last;
      if (peek.right == null || peek.right == lastVisited) {
        result.add(peek.value);
        lastVisited = stack.removeLast();
        current = null;
      } else {
        current = peek.right;
      }
    }
    return result;
  }

  void printLevel(int level) {
    _printLevel(root, level, 1);
  }

  void _printLevel(TreeNode? node, int targetLevel, int currentLevel) {
    if (node == null) return;
    if (targetLevel == currentLevel) {
      print(node.value);
    } else {
      _printLevel(node.left, targetLevel, currentLevel + 1);
      _printLevel(node.right, targetLevel, currentLevel + 1);
    }
  }

  void printLevelWithQueue(int level) {
    if (root == null) return;
    Queue<TreeNode> queue = Queue<TreeNode>();
    queue.add(root!);
    int currentLevel = 1;
    while (queue.isNotEmpty && currentLevel <= level) {
      int size = queue.length;
      List<int> currentValues = [];
      for (int i = 0; i < size; i++) {
        TreeNode node = queue.removeFirst();
        if (currentLevel == level) {
          currentValues.add(node.value);
        }
        if (node.left != null) queue.add(node.left!);
        if (node.right != null) queue.add(node.right!);
      }
      if (currentLevel == level) {
        print(currentValues.join(' '));
      }
      currentLevel++;
    }
  }
}

void main() {
  BinaryTree tree = BinaryTree();
  tree.addLevelOrder(1);
  tree.addLevelOrder(2);
  tree.addLevelOrder(3);
  tree.addLevelOrder(4);
  tree.addLevelOrder(5);
  tree.addLevelOrder(6);
  tree.addLevelOrder(7);

  print("Preorder (recursive):\n1 2 4 5 3 6 7");
  print("Preorder (iterative):\n${tree.preOrderTraversal().join(' ')}\n");

  print("Inorder (recursive):\n4 2 5 1 6 3 7");
  print("Inorder (iterative):\n${tree.inOrderTraversal().join(' ')}\n");

  print("Postorder (recursive):\n4 5 2 6 7 3 1");
  print("Postorder (iterative):\n${tree.postOrderTraversal().join(' ')}\n");

  print("Level order (level 3, rekursif):");
  tree.printLevel(3);

  print("Level order (level 2, pakai queue):");
  tree.printLevelWithQueue(2);

  tree.addByTarget(3, 99);
  print("\nInsert node 99 sebagai child dari node 3:");
  print("Level order setelah insert:");
  tree.printLevel(3);
}
